import fs from 'fs'
import path from 'path'
import { fileURLToPath } from 'url'

const __filename = fileURLToPath(import.meta.url)
const __dirname = path.dirname(__filename)

// 定义路径
const iconsDir = path.resolve(__dirname, '../src/assets/icons')
const outputFile = path.resolve(__dirname, '../src/components/ui/icons.ts')

// 读取所有SVG文件
function generateIconsFile() {
  try {
    // 读取icons目录下的所有文件
    const files = fs.readdirSync(iconsDir)
    const svgFiles = files.filter(file => file.endsWith('.svg'))
    
    if (svgFiles.length === 0) {
      console.log('No SVG files found in icons directory')
      return
    }
    
    // 生成TypeScript内容
    let tsContent = '// Auto-generated file - Do not edit manually\n'
    tsContent += '// Generated by scripts/generate-icons.js\n\n'
    
    // 定义图标接口
    tsContent += 'export interface IconData {\n'
    tsContent += '  name: string\n'
    tsContent += '  content: string\n'
    tsContent += '}\n\n'
    
    // 生成图标数据
    const iconData = []
    
    svgFiles.forEach(file => {
      const iconName = path.basename(file, '.svg')
      const filePath = path.join(iconsDir, file)
      const svgContent = fs.readFileSync(filePath, 'utf-8')
      
      // 清理SVG内容，移除不必要的属性
      const cleanedSvg = svgContent
        .replace(/width="[^"]*"/g, '')
        .replace(/height="[^"]*"/g, '')
        .replace(/style="[^"]*"/g, '')
        .replace(/<svg/, '<svg width="100%" height="100%"')
        .replace(/\s+/g, ' ')
        .trim()
      
      iconData.push({
        name: iconName,
        content: cleanedSvg
      })
    })
    
    // 生成图标常量
    tsContent += 'export const ICONS: Record<string, string> = {\n'
    iconData.forEach(icon => {
      tsContent += `  '${icon.name}': \`${icon.content}\`,\n`
    })
    tsContent += '}\n\n'
    
    // 生成图标名称类型
    tsContent += 'export type IconName = \n'
    const iconNames = iconData.map(icon => `  | '${icon.name}'`).join('\n')
    tsContent += iconNames + '\n\n'
    
    // 生成获取图标的函数
    tsContent += 'export function getIcon(name: IconName): string | undefined {\n'
    tsContent += '  return ICONS[name]\n'
    tsContent += '}\n\n'
    
    // 生成获取所有图标名称的函数
    tsContent += 'export function getAllIconNames(): IconName[] {\n'
    tsContent += '  return Object.keys(ICONS) as IconName[]\n'
    tsContent += '}\n'
    
    // 确保输出目录存在
    const outputDir = path.dirname(outputFile)
    if (!fs.existsSync(outputDir)) {
      fs.mkdirSync(outputDir, { recursive: true })
    }
    
    // 写入文件
    fs.writeFileSync(outputFile, tsContent, 'utf-8')
    
    console.log(`✅ Generated icons.ts with ${iconData.length} icons`)
    console.log(`📁 Output: ${outputFile}`)
    
    // 打印生成的图标列表
    console.log('\n📋 Generated icons:')
    iconData.forEach(icon => {
      console.log(`   - ${icon.name}`)
    })
    
  } catch (error) {
    console.error('❌ Error generating icons file:', error)
    process.exit(1)
  }
}

// 执行生成
generateIconsFile()